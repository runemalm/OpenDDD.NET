// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenDDD.Tests.Integration.Infrastructure.Persistence.EfCore.DbContext.Postgres;

#nullable disable

namespace OpenDDD.Tests.Integration.Infrastructure.Persistence.EfCore.Migrations.Postgres
{
    [DbContext(typeof(PostgresTestDbContext))]
    partial class PostgresTestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenDDD.Infrastructure.TransactionalOutbox.OutboxEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxEntries");
                });

            modelBuilder.Entity("OpenDDD.Tests.Domain.Model.TestAggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TestAggregateRoots", (string)null);
                });

            modelBuilder.Entity("OpenDDD.Tests.Domain.Model.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TestAggregateRootId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestAggregateRootId");

                    b.ToTable("TestEntities", (string)null);
                });

            modelBuilder.Entity("OpenDDD.Tests.Domain.Model.TestAggregateRoot", b =>
                {
                    b.OwnsOne("OpenDDD.Tests.Domain.Model.TestValueObject", "Value", b1 =>
                        {
                            b1.Property<Guid>("TestAggregateRootId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Number")
                                .HasColumnType("integer");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TestAggregateRootId");

                            b1.ToTable("TestAggregateRoots");

                            b1.WithOwner()
                                .HasForeignKey("TestAggregateRootId");
                        });

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("OpenDDD.Tests.Domain.Model.TestEntity", b =>
                {
                    b.HasOne("OpenDDD.Tests.Domain.Model.TestAggregateRoot", null)
                        .WithMany("Entities")
                        .HasForeignKey("TestAggregateRootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenDDD.Tests.Domain.Model.TestAggregateRoot", b =>
                {
                    b.Navigation("Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
